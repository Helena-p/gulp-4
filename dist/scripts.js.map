{"version":3,"sources":["scripts.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","console","log","camelCase","camelcase","2","input","options","Array","isArray","TypeError","preserveCamelCase","pascalCase","isLastCharLower","preserveConsecutiveUppercase","isLastCharUpper","character","map","x","trim","filter","string","isLastLastCharUpper","toLocaleUpperCase","locale","toLocaleLowerCase","test","slice","replace","testLocal","m1","toLowerCase","p1","testVar","_","m","default"],"mappings":"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","file":"scripts.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst testLocal = \"Here's a local script file!\";\nconsole.log(testLocal);\n\nconst camelCase = require(\"camelcase\");\nconst testVar = \"testing camelcase in js\";\nconsole.log(camelCase(testVar));\n\nconsole.log(\"Here's another script file\");\n\n},{\"camelcase\":2}],2:[function(require,module,exports){\n'use strict';\n\nconst preserveCamelCase = (string, locale) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = input => {\n\treturn input.replace(/^[\\p{Lu}](?![\\p{Lu}])/gu, m1 => m1.toLowerCase());\n};\n\nconst postProcess = (input, options) => {\n\treturn input.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))\n\t\t.replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);\n\t}\n\n\tconst hasUpperCase = input !== input.toLocaleLowerCase(options.locale);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, options.locale);\n\t}\n\n\tinput = input.replace(/^[_.\\- ]+/, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input);\n\t} else {\n\t\tinput = input.toLocaleLowerCase();\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);\n\t}\n\n\treturn postProcess(input, options);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n\n},{}]},{},[1]);\n"]}